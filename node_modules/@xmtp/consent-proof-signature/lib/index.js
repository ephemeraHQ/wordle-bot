import Long from 'long';
import { invitation } from '@xmtp/proto';

/**
 *
 * @param peerAddress - Ethereum address of the broadcaster
 * @param timestampMs - Timestamp in milliseconds used in the signature
 * @returns
 */
const createConsentMessage = (peerAddress, timestampMs) => "XMTP : Grant inbox consent to sender\n" +
    "\n" +
    `Current Time: ${new Date(timestampMs).toUTCString()}\n` +
    `From Address: ${peerAddress}\n` +
    "\n" +
    "For more info: https://xmtp.org/signatures/";
/**
 *
 * @param signature hex string of the signature
 * @param timestampMs timestamp in milliseconds used in the signature
 * @returns Uint8Array of the consent proof payload
 */
const createConsentProofPayload = (signature, timestampMs) => invitation.ConsentProofPayload.encode({
    signature,
    timestamp: Long.fromNumber(timestampMs),
    payloadVersion: invitation.ConsentProofPayloadVersion.CONSENT_PROOF_PAYLOAD_VERSION_1,
}).finish();

export { createConsentMessage, createConsentProofPayload };
//# sourceMappingURL=index.js.map
