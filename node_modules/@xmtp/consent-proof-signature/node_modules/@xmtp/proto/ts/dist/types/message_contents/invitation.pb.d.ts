import Long from "long";
import { SignedPublicKeyBundle } from "./public_key.pb";
import { Ciphertext } from "./ciphertext.pb";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "xmtp.message_contents";
/**
 * Invitation is used by an initiator to invite participants
 * into a new conversation. Invitation carries the chosen topic name
 * and encryption scheme and key material to be used for message encryption.
 */
/** Version of consent proof payload */
export declare enum ConsentProofPayloadVersion {
    CONSENT_PROOF_PAYLOAD_VERSION_UNSPECIFIED = 0,
    CONSENT_PROOF_PAYLOAD_VERSION_1 = 1,
    UNRECOGNIZED = -1
}
export declare function consentProofPayloadVersionFromJSON(object: any): ConsentProofPayloadVersion;
export declare function consentProofPayloadVersionToJSON(object: ConsentProofPayloadVersion): string;
/** Unsealed invitation V1 */
export interface InvitationV1 {
    /**
     * topic name chosen for this conversation.
     * It MUST be randomly generated bytes (length >= 32),
     * then base64 encoded without padding
     */
    topic: string;
    /** A context object defining metadata */
    context: InvitationV1_Context | undefined;
    /** Specify the encryption method to process the key material properly. */
    aes256GcmHkdfSha256: InvitationV1_Aes256gcmHkdfsha256 | undefined;
    /** The user's consent proof */
    consentProof: ConsentProofPayload | undefined;
}
/**
 * Supported encryption schemes
 * AES256-GCM-HKDF-SHA256
 */
export interface InvitationV1_Aes256gcmHkdfsha256 {
    /** randomly generated key material (32 bytes) */
    keyMaterial: Uint8Array;
}
/** The context type */
export interface InvitationV1_Context {
    /** Expected to be a URI (ie xmtp.org/convo1) */
    conversationId: string;
    /**
     * Key value map of additional metadata that would be exposed to
     * application developers and could be used for filtering
     */
    metadata: {
        [key: string]: string;
    };
}
export interface InvitationV1_Context_MetadataEntry {
    key: string;
    value: string;
}
/**
 * Sealed Invitation V1 Header
 * Header carries information that is unencrypted, thus readable by the network
 * it is however authenticated as associated data with the AEAD scheme used
 * to encrypt the invitation body, thus providing tamper evidence.
 */
export interface SealedInvitationHeaderV1 {
    sender: SignedPublicKeyBundle | undefined;
    recipient: SignedPublicKeyBundle | undefined;
    createdNs: Long;
}
/**
 * Sealed Invitation V1
 * Invitation encrypted with key material derived from the sender's and
 * recipient's public key bundles using simplified X3DH where
 * the sender's ephemeral key is replaced with sender's pre-key.
 */
export interface SealedInvitationV1 {
    /** encoded SealedInvitationHeaderV1 used as associated data for Ciphertext */
    headerBytes: Uint8Array;
    /** Ciphertext.payload MUST contain encrypted InvitationV1. */
    ciphertext: Ciphertext | undefined;
}
/** Versioned Sealed Invitation */
export interface SealedInvitation {
    v1: SealedInvitationV1 | undefined;
}
/**
 * Payload for user's consent proof to be set in the invitation
 * Signifying the conversation should be preapproved for the user on receipt
 */
export interface ConsentProofPayload {
    /** the user's signature in hex format */
    signature: string;
    /** approximate time when the user signed */
    timestamp: Long;
    /** version of the payload */
    payloadVersion: ConsentProofPayloadVersion;
}
export declare const InvitationV1: {
    encode(message: InvitationV1, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): InvitationV1;
    fromJSON(object: any): InvitationV1;
    toJSON(message: InvitationV1): unknown;
    fromPartial<I extends {
        topic?: string | undefined;
        context?: {
            conversationId?: string | undefined;
            metadata?: {
                [x: string]: string | undefined;
            } | undefined;
        } | undefined;
        aes256GcmHkdfSha256?: {
            keyMaterial?: Uint8Array | undefined;
        } | undefined;
        consentProof?: {
            signature?: string | undefined;
            timestamp?: string | number | Long | undefined;
            payloadVersion?: ConsentProofPayloadVersion | undefined;
        } | undefined;
    } & {
        topic?: string | undefined;
        context?: ({
            conversationId?: string | undefined;
            metadata?: {
                [x: string]: string | undefined;
            } | undefined;
        } & {
            conversationId?: string | undefined;
            metadata?: ({
                [x: string]: string | undefined;
            } & {
                [x: string]: string | undefined;
            } & { [K in Exclude<keyof I["context"]["metadata"], string | number>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["context"], keyof InvitationV1_Context>]: never; }) | undefined;
        aes256GcmHkdfSha256?: ({
            keyMaterial?: Uint8Array | undefined;
        } & {
            keyMaterial?: Uint8Array | undefined;
        } & { [K_2 in Exclude<keyof I["aes256GcmHkdfSha256"], "keyMaterial">]: never; }) | undefined;
        consentProof?: ({
            signature?: string | undefined;
            timestamp?: string | number | Long | undefined;
            payloadVersion?: ConsentProofPayloadVersion | undefined;
        } & {
            signature?: string | undefined;
            timestamp?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_3 in Exclude<keyof I["consentProof"]["timestamp"], keyof Long>]: never; }) | undefined;
            payloadVersion?: ConsentProofPayloadVersion | undefined;
        } & { [K_4 in Exclude<keyof I["consentProof"], keyof ConsentProofPayload>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I, keyof InvitationV1>]: never; }>(object: I): InvitationV1;
};
export declare const InvitationV1_Aes256gcmHkdfsha256: {
    encode(message: InvitationV1_Aes256gcmHkdfsha256, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): InvitationV1_Aes256gcmHkdfsha256;
    fromJSON(object: any): InvitationV1_Aes256gcmHkdfsha256;
    toJSON(message: InvitationV1_Aes256gcmHkdfsha256): unknown;
    fromPartial<I extends {
        keyMaterial?: Uint8Array | undefined;
    } & {
        keyMaterial?: Uint8Array | undefined;
    } & { [K in Exclude<keyof I, "keyMaterial">]: never; }>(object: I): InvitationV1_Aes256gcmHkdfsha256;
};
export declare const InvitationV1_Context: {
    encode(message: InvitationV1_Context, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): InvitationV1_Context;
    fromJSON(object: any): InvitationV1_Context;
    toJSON(message: InvitationV1_Context): unknown;
    fromPartial<I extends {
        conversationId?: string | undefined;
        metadata?: {
            [x: string]: string | undefined;
        } | undefined;
    } & {
        conversationId?: string | undefined;
        metadata?: ({
            [x: string]: string | undefined;
        } & {
            [x: string]: string | undefined;
        } & { [K in Exclude<keyof I["metadata"], string | number>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, keyof InvitationV1_Context>]: never; }>(object: I): InvitationV1_Context;
};
export declare const InvitationV1_Context_MetadataEntry: {
    encode(message: InvitationV1_Context_MetadataEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): InvitationV1_Context_MetadataEntry;
    fromJSON(object: any): InvitationV1_Context_MetadataEntry;
    toJSON(message: InvitationV1_Context_MetadataEntry): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        value?: string | undefined;
    } & {
        key?: string | undefined;
        value?: string | undefined;
    } & { [K in Exclude<keyof I, keyof InvitationV1_Context_MetadataEntry>]: never; }>(object: I): InvitationV1_Context_MetadataEntry;
};
export declare const SealedInvitationHeaderV1: {
    encode(message: SealedInvitationHeaderV1, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SealedInvitationHeaderV1;
    fromJSON(object: any): SealedInvitationHeaderV1;
    toJSON(message: SealedInvitationHeaderV1): unknown;
    fromPartial<I extends {
        sender?: {
            identityKey?: {
                keyBytes?: Uint8Array | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                    walletEcdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
            preKey?: {
                keyBytes?: Uint8Array | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                    walletEcdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
        recipient?: {
            identityKey?: {
                keyBytes?: Uint8Array | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                    walletEcdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
            preKey?: {
                keyBytes?: Uint8Array | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                    walletEcdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
        createdNs?: string | number | Long | undefined;
    } & {
        sender?: ({
            identityKey?: {
                keyBytes?: Uint8Array | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                    walletEcdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
            preKey?: {
                keyBytes?: Uint8Array | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                    walletEcdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
        } & {
            identityKey?: ({
                keyBytes?: Uint8Array | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                    walletEcdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
            } & {
                keyBytes?: Uint8Array | undefined;
                signature?: ({
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                    walletEcdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } & {
                    ecdsaCompact?: ({
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & { [K in Exclude<keyof I["sender"]["identityKey"]["signature"]["ecdsaCompact"], keyof import("./signature.pb").Signature_ECDSACompact>]: never; }) | undefined;
                    walletEcdsaCompact?: ({
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & { [K_1 in Exclude<keyof I["sender"]["identityKey"]["signature"]["walletEcdsaCompact"], keyof import("./signature.pb").Signature_WalletECDSACompact>]: never; }) | undefined;
                } & { [K_2 in Exclude<keyof I["sender"]["identityKey"]["signature"], keyof import("./signature.pb").Signature>]: never; }) | undefined;
            } & { [K_3 in Exclude<keyof I["sender"]["identityKey"], keyof import("./public_key.pb").SignedPublicKey>]: never; }) | undefined;
            preKey?: ({
                keyBytes?: Uint8Array | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                    walletEcdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
            } & {
                keyBytes?: Uint8Array | undefined;
                signature?: ({
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                    walletEcdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } & {
                    ecdsaCompact?: ({
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & { [K_4 in Exclude<keyof I["sender"]["preKey"]["signature"]["ecdsaCompact"], keyof import("./signature.pb").Signature_ECDSACompact>]: never; }) | undefined;
                    walletEcdsaCompact?: ({
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & { [K_5 in Exclude<keyof I["sender"]["preKey"]["signature"]["walletEcdsaCompact"], keyof import("./signature.pb").Signature_WalletECDSACompact>]: never; }) | undefined;
                } & { [K_6 in Exclude<keyof I["sender"]["preKey"]["signature"], keyof import("./signature.pb").Signature>]: never; }) | undefined;
            } & { [K_7 in Exclude<keyof I["sender"]["preKey"], keyof import("./public_key.pb").SignedPublicKey>]: never; }) | undefined;
        } & { [K_8 in Exclude<keyof I["sender"], keyof SignedPublicKeyBundle>]: never; }) | undefined;
        recipient?: ({
            identityKey?: {
                keyBytes?: Uint8Array | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                    walletEcdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
            preKey?: {
                keyBytes?: Uint8Array | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                    walletEcdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
        } & {
            identityKey?: ({
                keyBytes?: Uint8Array | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                    walletEcdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
            } & {
                keyBytes?: Uint8Array | undefined;
                signature?: ({
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                    walletEcdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } & {
                    ecdsaCompact?: ({
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & { [K_9 in Exclude<keyof I["recipient"]["identityKey"]["signature"]["ecdsaCompact"], keyof import("./signature.pb").Signature_ECDSACompact>]: never; }) | undefined;
                    walletEcdsaCompact?: ({
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & { [K_10 in Exclude<keyof I["recipient"]["identityKey"]["signature"]["walletEcdsaCompact"], keyof import("./signature.pb").Signature_WalletECDSACompact>]: never; }) | undefined;
                } & { [K_11 in Exclude<keyof I["recipient"]["identityKey"]["signature"], keyof import("./signature.pb").Signature>]: never; }) | undefined;
            } & { [K_12 in Exclude<keyof I["recipient"]["identityKey"], keyof import("./public_key.pb").SignedPublicKey>]: never; }) | undefined;
            preKey?: ({
                keyBytes?: Uint8Array | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                    walletEcdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
            } & {
                keyBytes?: Uint8Array | undefined;
                signature?: ({
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                    walletEcdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } & {
                    ecdsaCompact?: ({
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & { [K_13 in Exclude<keyof I["recipient"]["preKey"]["signature"]["ecdsaCompact"], keyof import("./signature.pb").Signature_ECDSACompact>]: never; }) | undefined;
                    walletEcdsaCompact?: ({
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & { [K_14 in Exclude<keyof I["recipient"]["preKey"]["signature"]["walletEcdsaCompact"], keyof import("./signature.pb").Signature_WalletECDSACompact>]: never; }) | undefined;
                } & { [K_15 in Exclude<keyof I["recipient"]["preKey"]["signature"], keyof import("./signature.pb").Signature>]: never; }) | undefined;
            } & { [K_16 in Exclude<keyof I["recipient"]["preKey"], keyof import("./public_key.pb").SignedPublicKey>]: never; }) | undefined;
        } & { [K_17 in Exclude<keyof I["recipient"], keyof SignedPublicKeyBundle>]: never; }) | undefined;
        createdNs?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_18 in Exclude<keyof I["createdNs"], keyof Long>]: never; }) | undefined;
    } & { [K_19 in Exclude<keyof I, keyof SealedInvitationHeaderV1>]: never; }>(object: I): SealedInvitationHeaderV1;
};
export declare const SealedInvitationV1: {
    encode(message: SealedInvitationV1, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SealedInvitationV1;
    fromJSON(object: any): SealedInvitationV1;
    toJSON(message: SealedInvitationV1): unknown;
    fromPartial<I extends {
        headerBytes?: Uint8Array | undefined;
        ciphertext?: {
            aes256GcmHkdfSha256?: {
                hkdfSalt?: Uint8Array | undefined;
                gcmNonce?: Uint8Array | undefined;
                payload?: Uint8Array | undefined;
            } | undefined;
        } | undefined;
    } & {
        headerBytes?: Uint8Array | undefined;
        ciphertext?: ({
            aes256GcmHkdfSha256?: {
                hkdfSalt?: Uint8Array | undefined;
                gcmNonce?: Uint8Array | undefined;
                payload?: Uint8Array | undefined;
            } | undefined;
        } & {
            aes256GcmHkdfSha256?: ({
                hkdfSalt?: Uint8Array | undefined;
                gcmNonce?: Uint8Array | undefined;
                payload?: Uint8Array | undefined;
            } & {
                hkdfSalt?: Uint8Array | undefined;
                gcmNonce?: Uint8Array | undefined;
                payload?: Uint8Array | undefined;
            } & { [K in Exclude<keyof I["ciphertext"]["aes256GcmHkdfSha256"], keyof import("./ciphertext.pb").Ciphertext_Aes256gcmHkdfsha256>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["ciphertext"], "aes256GcmHkdfSha256">]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, keyof SealedInvitationV1>]: never; }>(object: I): SealedInvitationV1;
};
export declare const SealedInvitation: {
    encode(message: SealedInvitation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SealedInvitation;
    fromJSON(object: any): SealedInvitation;
    toJSON(message: SealedInvitation): unknown;
    fromPartial<I extends {
        v1?: {
            headerBytes?: Uint8Array | undefined;
            ciphertext?: {
                aes256GcmHkdfSha256?: {
                    hkdfSalt?: Uint8Array | undefined;
                    gcmNonce?: Uint8Array | undefined;
                    payload?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
    } & {
        v1?: ({
            headerBytes?: Uint8Array | undefined;
            ciphertext?: {
                aes256GcmHkdfSha256?: {
                    hkdfSalt?: Uint8Array | undefined;
                    gcmNonce?: Uint8Array | undefined;
                    payload?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        } & {
            headerBytes?: Uint8Array | undefined;
            ciphertext?: ({
                aes256GcmHkdfSha256?: {
                    hkdfSalt?: Uint8Array | undefined;
                    gcmNonce?: Uint8Array | undefined;
                    payload?: Uint8Array | undefined;
                } | undefined;
            } & {
                aes256GcmHkdfSha256?: ({
                    hkdfSalt?: Uint8Array | undefined;
                    gcmNonce?: Uint8Array | undefined;
                    payload?: Uint8Array | undefined;
                } & {
                    hkdfSalt?: Uint8Array | undefined;
                    gcmNonce?: Uint8Array | undefined;
                    payload?: Uint8Array | undefined;
                } & { [K in Exclude<keyof I["v1"]["ciphertext"]["aes256GcmHkdfSha256"], keyof import("./ciphertext.pb").Ciphertext_Aes256gcmHkdfsha256>]: never; }) | undefined;
            } & { [K_1 in Exclude<keyof I["v1"]["ciphertext"], "aes256GcmHkdfSha256">]: never; }) | undefined;
        } & { [K_2 in Exclude<keyof I["v1"], keyof SealedInvitationV1>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, "v1">]: never; }>(object: I): SealedInvitation;
};
export declare const ConsentProofPayload: {
    encode(message: ConsentProofPayload, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ConsentProofPayload;
    fromJSON(object: any): ConsentProofPayload;
    toJSON(message: ConsentProofPayload): unknown;
    fromPartial<I extends {
        signature?: string | undefined;
        timestamp?: string | number | Long | undefined;
        payloadVersion?: ConsentProofPayloadVersion | undefined;
    } & {
        signature?: string | undefined;
        timestamp?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K in Exclude<keyof I["timestamp"], keyof Long>]: never; }) | undefined;
        payloadVersion?: ConsentProofPayloadVersion | undefined;
    } & { [K_1 in Exclude<keyof I, keyof ConsentProofPayload>]: never; }>(object: I): ConsentProofPayload;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
