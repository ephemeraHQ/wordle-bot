import { content } from '@xmtp/proto';

declare class ContentTypeId {
    authorityId: string;
    typeId: string;
    versionMajor: number;
    versionMinor: number;
    constructor(obj: content.ContentTypeId);
    toString(): string;
    static fromString(contentTypeString: string): ContentTypeId;
    sameAs(id: ContentTypeId): boolean;
}
type EncodedContent<Parameters = Record<string, string>> = {
    type: ContentTypeId;
    parameters: Parameters;
    fallback?: string;
    compression?: number;
    content: Uint8Array;
};
type ContentCodec<T = any> = {
    contentType: ContentTypeId;
    encode(content: T, registry: CodecRegistry<T>): EncodedContent;
    decode(content: EncodedContent, registry: CodecRegistry<T>): T;
    fallback(content: T): string | undefined;
    shouldPush: (content: T) => boolean;
};
/**
 * An interface implemented for accessing codecs by content type.
 * @deprecated
 */
interface CodecRegistry<T = any> {
    codecFor(contentType: ContentTypeId): ContentCodec<T> | undefined;
}
type CodecMap<T = any> = Map<string, ContentCodec<T>>;

export { type CodecMap, type CodecRegistry, type ContentCodec, ContentTypeId, type EncodedContent };
