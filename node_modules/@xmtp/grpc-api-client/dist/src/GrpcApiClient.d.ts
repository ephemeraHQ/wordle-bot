import { messageApi } from "@xmtp/proto";
import { ApiClient, Authenticator, NetworkOptions, OnConnectionLostCallback, PublishParams, Query, QueryAllOptions, QueryParams, QueryStreamOptions, SubscribeCallback, SubscribeParams, SubscriptionManager } from "@xmtp/xmtp-js";
import pino from "pino";
import { MessageApiClient } from "./gen/message_api/v1/message_api.client.js";
import { PublishResponse } from "./gen/message_api/v1/message_api.js";
export default class GrpcApiClient implements ApiClient {
    grpcClient: MessageApiClient;
    private authCache?;
    private appVersion?;
    private logger;
    apiUrl: string;
    constructor(apiUrl: string, isSecure: boolean, appVersion?: string);
    static fromOptions(options: NetworkOptions): GrpcApiClient;
    private _publish;
    private _query;
    private _batchQuery;
    query(params: QueryParams, { direction, limit, }: QueryAllOptions): Promise<messageApi.Envelope[]>;
    queryIterator(params: QueryParams, options: QueryStreamOptions): AsyncGenerator<messageApi.Envelope>;
    queryIteratePages({ contentTopic, startTime, endTime }: QueryParams, { direction, pageSize }: QueryStreamOptions): AsyncGenerator<messageApi.Envelope[]>;
    publish(messages: PublishParams[]): Promise<PublishResponse>;
    subscribe(params: SubscribeParams, callback: SubscribeCallback, onConnectionLost: OnConnectionLostCallback): SubscriptionManager;
    batchQuery(queries: Query[]): Promise<messageApi.Envelope[][]>;
    setAuthenticator(authenticator: Authenticator, cacheExpirySeconds?: number): void;
    setLogger(logger: pino.Logger): void;
    private getToken;
    private metadata;
}
//# sourceMappingURL=GrpcApiClient.d.ts.map