import { MessageApi } from "./message_api.js";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
/**
 * RPC
 *
 * @generated from protobuf service xmtp.message_api.v1.MessageApi
 */
export class MessageApiClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = MessageApi.typeName;
        this.methods = MessageApi.methods;
        this.options = MessageApi.options;
    }
    /**
     * Publish messages to the network
     *
     * @generated from protobuf rpc: Publish(xmtp.message_api.v1.PublishRequest) returns (xmtp.message_api.v1.PublishResponse);
     */
    publish(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Subscribe to a stream of new envelopes matching a predicate
     *
     * @generated from protobuf rpc: Subscribe(xmtp.message_api.v1.SubscribeRequest) returns (stream xmtp.message_api.v1.Envelope);
     */
    subscribe(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Subscribe to a stream of new envelopes and your subscription using
     * bidirectional streaming
     * protolint:disable:next RPC_REQUEST_STANDARD_NAME
     *
     * @generated from protobuf rpc: Subscribe2(stream xmtp.message_api.v1.SubscribeRequest) returns (stream xmtp.message_api.v1.Envelope);
     */
    subscribe2(options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept("duplex", this._transport, method, opt);
    }
    /**
     * Subscribe to a stream of all messages
     *
     * @generated from protobuf rpc: SubscribeAll(xmtp.message_api.v1.SubscribeAllRequest) returns (stream xmtp.message_api.v1.Envelope);
     */
    subscribeAll(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Query the store for messages
     *
     * @generated from protobuf rpc: Query(xmtp.message_api.v1.QueryRequest) returns (xmtp.message_api.v1.QueryResponse);
     */
    query(input, options) {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * BatchQuery containing a set of queries to be processed
     *
     * @generated from protobuf rpc: BatchQuery(xmtp.message_api.v1.BatchQueryRequest) returns (xmtp.message_api.v1.BatchQueryResponse);
     */
    batchQuery(input, options) {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
}
//# sourceMappingURL=message_api.client.js.map