import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { BatchQueryResponse } from "./message_api.js";
import type { BatchQueryRequest } from "./message_api.js";
import type { QueryResponse } from "./message_api.js";
import type { QueryRequest } from "./message_api.js";
import type { SubscribeAllRequest } from "./message_api.js";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { Envelope } from "./message_api.js";
import type { SubscribeRequest } from "./message_api.js";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { PublishResponse } from "./message_api.js";
import type { PublishRequest } from "./message_api.js";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * RPC
 *
 * @generated from protobuf service xmtp.message_api.v1.MessageApi
 */
export interface IMessageApiClient {
    /**
     * Publish messages to the network
     *
     * @generated from protobuf rpc: Publish(xmtp.message_api.v1.PublishRequest) returns (xmtp.message_api.v1.PublishResponse);
     */
    publish(input: PublishRequest, options?: RpcOptions): UnaryCall<PublishRequest, PublishResponse>;
    /**
     * Subscribe to a stream of new envelopes matching a predicate
     *
     * @generated from protobuf rpc: Subscribe(xmtp.message_api.v1.SubscribeRequest) returns (stream xmtp.message_api.v1.Envelope);
     */
    subscribe(input: SubscribeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeRequest, Envelope>;
    /**
     * Subscribe to a stream of new envelopes and your subscription using
     * bidirectional streaming
     * protolint:disable:next RPC_REQUEST_STANDARD_NAME
     *
     * @generated from protobuf rpc: Subscribe2(stream xmtp.message_api.v1.SubscribeRequest) returns (stream xmtp.message_api.v1.Envelope);
     */
    subscribe2(options?: RpcOptions): DuplexStreamingCall<SubscribeRequest, Envelope>;
    /**
     * Subscribe to a stream of all messages
     *
     * @generated from protobuf rpc: SubscribeAll(xmtp.message_api.v1.SubscribeAllRequest) returns (stream xmtp.message_api.v1.Envelope);
     */
    subscribeAll(input: SubscribeAllRequest, options?: RpcOptions): ServerStreamingCall<SubscribeAllRequest, Envelope>;
    /**
     * Query the store for messages
     *
     * @generated from protobuf rpc: Query(xmtp.message_api.v1.QueryRequest) returns (xmtp.message_api.v1.QueryResponse);
     */
    query(input: QueryRequest, options?: RpcOptions): UnaryCall<QueryRequest, QueryResponse>;
    /**
     * BatchQuery containing a set of queries to be processed
     *
     * @generated from protobuf rpc: BatchQuery(xmtp.message_api.v1.BatchQueryRequest) returns (xmtp.message_api.v1.BatchQueryResponse);
     */
    batchQuery(input: BatchQueryRequest, options?: RpcOptions): UnaryCall<BatchQueryRequest, BatchQueryResponse>;
}
/**
 * RPC
 *
 * @generated from protobuf service xmtp.message_api.v1.MessageApi
 */
export declare class MessageApiClient implements IMessageApiClient, ServiceInfo {
    private readonly _transport;
    typeName: string;
    methods: import("@protobuf-ts/runtime-rpc").MethodInfo<any, any>[];
    options: {
        [extensionName: string]: import("@protobuf-ts/runtime").JsonValue;
    };
    constructor(_transport: RpcTransport);
    /**
     * Publish messages to the network
     *
     * @generated from protobuf rpc: Publish(xmtp.message_api.v1.PublishRequest) returns (xmtp.message_api.v1.PublishResponse);
     */
    publish(input: PublishRequest, options?: RpcOptions): UnaryCall<PublishRequest, PublishResponse>;
    /**
     * Subscribe to a stream of new envelopes matching a predicate
     *
     * @generated from protobuf rpc: Subscribe(xmtp.message_api.v1.SubscribeRequest) returns (stream xmtp.message_api.v1.Envelope);
     */
    subscribe(input: SubscribeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeRequest, Envelope>;
    /**
     * Subscribe to a stream of new envelopes and your subscription using
     * bidirectional streaming
     * protolint:disable:next RPC_REQUEST_STANDARD_NAME
     *
     * @generated from protobuf rpc: Subscribe2(stream xmtp.message_api.v1.SubscribeRequest) returns (stream xmtp.message_api.v1.Envelope);
     */
    subscribe2(options?: RpcOptions): DuplexStreamingCall<SubscribeRequest, Envelope>;
    /**
     * Subscribe to a stream of all messages
     *
     * @generated from protobuf rpc: SubscribeAll(xmtp.message_api.v1.SubscribeAllRequest) returns (stream xmtp.message_api.v1.Envelope);
     */
    subscribeAll(input: SubscribeAllRequest, options?: RpcOptions): ServerStreamingCall<SubscribeAllRequest, Envelope>;
    /**
     * Query the store for messages
     *
     * @generated from protobuf rpc: Query(xmtp.message_api.v1.QueryRequest) returns (xmtp.message_api.v1.QueryResponse);
     */
    query(input: QueryRequest, options?: RpcOptions): UnaryCall<QueryRequest, QueryResponse>;
    /**
     * BatchQuery containing a set of queries to be processed
     *
     * @generated from protobuf rpc: BatchQuery(xmtp.message_api.v1.BatchQueryRequest) returns (xmtp.message_api.v1.BatchQueryResponse);
     */
    batchQuery(input: BatchQueryRequest, options?: RpcOptions): UnaryCall<BatchQueryRequest, BatchQueryResponse>;
}
//# sourceMappingURL=message_api.client.d.ts.map