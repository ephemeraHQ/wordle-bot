import { Client, DecodedMessage, Conversation as Conversation$1, ClientOptions } from '@xmtp/node-sdk';
import { Conversation, Client as Client$1, DecodedMessage as DecodedMessage$1 } from '@xmtp/xmtp-js';
import { ContentTypeId } from '@xmtp/content-type-primitives';

declare class HandlerContext {
    private refConv;
    message: MessageAbstracted;
    group: GroupAbstracted;
    conversation: Conversation;
    client: Client;
    version: "v2" | "v3";
    v2client: Client$1;
    commands?: CommandGroup[];
    isGroup: boolean;
    members?: User[];
    getMessageById: (id: string) => DecodedMessage | null;
    private constructor();
    static loadCommandConfig(configPath?: string): Promise<CommandGroup[]>;
    static create(conversation: Conversation$1 | Conversation, message: DecodedMessage | DecodedMessage$1 | null, { client, v2client }: {
        client: Client;
        v2client: Client$1;
    }, commandsConfigPath?: string, version?: "v2" | "v3"): Promise<HandlerContext>;
    getV2MessageById(reference: string): Promise<DecodedMessage$1 | null>;
    getReplyChain(reference: string, version: "v2" | "v3", botAddress?: string): Promise<{
        chain: Array<{
            address: string;
            content: string;
        }>;
        isSenderInChain: boolean;
    }>;
    reply(message: string): Promise<void>;
    send(message: string): Promise<void>;
    isConversationV2(conversation: Conversation$1 | Conversation | null): conversation is Conversation;
    react(emoji: string): Promise<void>;
    getCacheCreationDate(): Promise<Date | undefined>;
    sendTo(message: string, receivers: string[]): Promise<void>;
    intent(text: string, conversation?: Conversation$1): Promise<void | ApiResponse>;
}

type MessageAbstracted = {
    id: string;
    sent: Date;
    content: any;
    version: string;
    sender: {
        inboxId: string;
        username: string;
        address: string;
        accountAddresses: string[];
    };
    typeId: string;
};
type GroupAbstracted = {
    id: string;
    sync: () => Promise<void>;
    addMembers: (addresses: string[]) => Promise<void>;
    addMembersByInboxId: (inboxIds: string[]) => Promise<void>;
    send: (content: string, contentType?: ContentTypeId) => Promise<string>;
    createdAt: Date;
};
type ApiResponse = {
    code: number;
    message: string;
};
type CommandHandler = (context: HandlerContext) => Promise<void | ApiResponse>;
type Handler = (context: HandlerContext) => Promise<void>;
type Config = {
    client?: ClientOptions;
    privateKey?: string;
    commandsConfigPath?: string;
    logging?: "debug" | "info" | "warn" | "error" | "off";
};
interface CommandParamConfig {
    default?: string | number | boolean;
    type: "number" | "string" | "username" | "quoted" | "address" | "prompt";
    values?: string[];
}
interface CommandGroup {
    name: string;
    triggers: string[];
    image?: boolean;
    description: string;
    commands: CommandConfig[];
}
interface CommandConfig {
    command: string;
    handler?: CommandHandler;
    description: string;
    params: Record<string, CommandParamConfig>;
}
interface User {
    inboxId: string;
    username: string;
    address: string;
    accountAddresses: string[];
    installationIds?: string[];
    fake?: boolean;
}
type MetadataValue = string | number | boolean;
type Metadata = Record<string, MetadataValue | MetadataValue[]>;

declare function run(handler: Handler, config?: Config): Promise<void>;

declare function xmtpClient(clientConfig?: ClientOptions, privateKey?: string | null, logging?: "debug" | "info" | "warn" | "error" | "off"): Promise<{
    client: Client;
    v2client: Client$1;
}>;

export { type ApiResponse, type CommandConfig, type CommandGroup, type CommandHandler, type CommandParamConfig, type Config, type GroupAbstracted, type Handler, HandlerContext, type MessageAbstracted, type Metadata, type MetadataValue, type User, run, xmtpClient };
