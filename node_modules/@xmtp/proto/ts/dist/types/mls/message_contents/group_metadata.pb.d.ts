import Long from "long";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "xmtp.mls.message_contents";
/** Group immutable metadata */
/** Defines the type of conversation */
export declare enum ConversationType {
    CONVERSATION_TYPE_UNSPECIFIED = 0,
    CONVERSATION_TYPE_GROUP = 1,
    CONVERSATION_TYPE_DM = 2,
    CONVERSATION_TYPE_SYNC = 3,
    UNRECOGNIZED = -1
}
export declare function conversationTypeFromJSON(object: any): ConversationType;
export declare function conversationTypeToJSON(object: ConversationType): string;
/** Parent message for group metadata */
export interface GroupMetadataV1 {
    conversationType: ConversationType;
    /** This will be removed soon */
    creatorAccountAddress: string;
    creatorInboxId: string;
    /** Should only be present for CONVERSATION_TYPE_DM */
    dmMembers?: DmMembers | undefined;
}
/** Wrapper around an Inbox Id */
export interface Inbox {
    inboxId: string;
}
/** Ordering does not matter here */
export interface DmMembers {
    dmMemberOne: Inbox | undefined;
    dmMemberTwo: Inbox | undefined;
}
export declare const GroupMetadataV1: {
    encode(message: GroupMetadataV1, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GroupMetadataV1;
    fromJSON(object: any): GroupMetadataV1;
    toJSON(message: GroupMetadataV1): unknown;
    fromPartial<I extends {
        conversationType?: ConversationType | undefined;
        creatorAccountAddress?: string | undefined;
        creatorInboxId?: string | undefined;
        dmMembers?: {
            dmMemberOne?: {
                inboxId?: string | undefined;
            } | undefined;
            dmMemberTwo?: {
                inboxId?: string | undefined;
            } | undefined;
        } | undefined;
    } & {
        conversationType?: ConversationType | undefined;
        creatorAccountAddress?: string | undefined;
        creatorInboxId?: string | undefined;
        dmMembers?: ({
            dmMemberOne?: {
                inboxId?: string | undefined;
            } | undefined;
            dmMemberTwo?: {
                inboxId?: string | undefined;
            } | undefined;
        } & {
            dmMemberOne?: ({
                inboxId?: string | undefined;
            } & {
                inboxId?: string | undefined;
            } & { [K in Exclude<keyof I["dmMembers"]["dmMemberOne"], "inboxId">]: never; }) | undefined;
            dmMemberTwo?: ({
                inboxId?: string | undefined;
            } & {
                inboxId?: string | undefined;
            } & { [K_1 in Exclude<keyof I["dmMembers"]["dmMemberTwo"], "inboxId">]: never; }) | undefined;
        } & { [K_2 in Exclude<keyof I["dmMembers"], keyof DmMembers>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, keyof GroupMetadataV1>]: never; }>(object: I): GroupMetadataV1;
};
export declare const Inbox: {
    encode(message: Inbox, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Inbox;
    fromJSON(object: any): Inbox;
    toJSON(message: Inbox): unknown;
    fromPartial<I extends {
        inboxId?: string | undefined;
    } & {
        inboxId?: string | undefined;
    } & { [K in Exclude<keyof I, "inboxId">]: never; }>(object: I): Inbox;
};
export declare const DmMembers: {
    encode(message: DmMembers, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DmMembers;
    fromJSON(object: any): DmMembers;
    toJSON(message: DmMembers): unknown;
    fromPartial<I extends {
        dmMemberOne?: {
            inboxId?: string | undefined;
        } | undefined;
        dmMemberTwo?: {
            inboxId?: string | undefined;
        } | undefined;
    } & {
        dmMemberOne?: ({
            inboxId?: string | undefined;
        } & {
            inboxId?: string | undefined;
        } & { [K in Exclude<keyof I["dmMemberOne"], "inboxId">]: never; }) | undefined;
        dmMemberTwo?: ({
            inboxId?: string | undefined;
        } & {
            inboxId?: string | undefined;
        } & { [K_1 in Exclude<keyof I["dmMemberTwo"], "inboxId">]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, keyof DmMembers>]: never; }>(object: I): DmMembers;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
